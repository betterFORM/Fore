<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ev="http://www.w3.org/2001/xml-events"
      xmlns:xf="http://www.w3.org/2002/xforms">
    <head>
        <title></title>
        <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
        <script src="../bower_components/webcomponentsjs/webcomponents-lite.min.js"></script>
        <script src="../bower_components/jquery/dist/jquery.js" type="text/javascript"></script>
        <script src="resources/js/jquery.atmosphere.js"/>

        <link rel="import" href="../custom-elements/fore-bridge/fore-bridge.html"/>
        <link rel="import" href="../custom-elements/fore-xf-repeat/fore-xf-repeat.html"/>
        <link rel="import" href="../custom-elements/fore-xf-input/fore-xf-input.html"/>

    </head>
    <body>
        <xf:model>
            <xf:instance>
                <data xmlns="">
                    <foo>bar</foo>
                </data>
            </xf:instance>
            <xf:bind ref="foo" readonly="string-length(.) > 5"/>
        </xf:model>

        <fore-bridge transport="websocket" xfSession="{$sessionKey}"></fore-bridge>
        <h1>Simple xf input example</h1>

        <p>
            xf-* components use the server-side approach of betterFORM and provide a 'legacy mode' - the processing
            and syntax of the xforms model does not change. Further, XPath is used for binding but instead of using
            xf:* controls annotated HTML elements are used.
        </p>

        <p>
            Shows 2 controls bound to the same node. These should update both when
            one of them is changed.
        </p>

        <p>
            Further uses a readonly constraint allowing a max of 5 chars as input. Should become readonly if more than 5
            chars are typed in.
        </p>

        <div id="ernies" is="fore-xf-repeat" repeat-ref="foo">
            <label for="ernie">Ernie</label>
            <input id="ernie" type="text" is="fore-xf-input" ref="."/>
            <input id="bert" type="text" value="bert"/>
        </div>
        <button id="btn1" type="button" is="fore-xf-trigger" action="'click', append:'ernies'"/>
        <button id="btn2" type="button" is="fore-xf-trigger" action="'click', setvalue:('instance()/foo', 'nose')"/>
        <!--<button type="button" data-fore-prepend="ernies"/>-->
        <!-- at current position -->
        <!--<button type="button" data-fore-insert="ernies"/>-->
        <script>
            $('#btn2').on("click",function(){

            });
        </script>
        <fore-controller>
            <fore-action action="setvalue" event="click" control="btn2"/>
        </fore-controller>
    </body>
</html>



